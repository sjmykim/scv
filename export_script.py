#
# This file is generated by SCV to run Ultralytics YOLO export externally.
#
# Copyright (C) 2025 SCV
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#

import os
import sys
import argparse


def _prepare_env(settings_dir: str):
    try:
        os.environ['ULTRALYTICS_SETTINGS'] = os.path.join(settings_dir, 'ultralytics_settings.yaml')
        os.environ['ULTRALYTICS_CONFIG_DIR'] = settings_dir
        os.environ['ULTRALYTICS_PYTHON'] = sys.executable
        os.environ['PYTHONEXECUTABLE'] = sys.executable
        try:
            with open(os.environ['ULTRALYTICS_SETTINGS'], 'w', encoding='utf-8') as sf:
                sf.write("python: " + sys.executable.replace('\\','/') + "\n")
        except Exception:
            pass
    except Exception as e:
        print("Warning: env prepare failed:", e)


def _find_best(weights_arg: str, exp_root: str):
    if weights_arg and os.path.exists(weights_arg):
        return weights_arg
    candidates = [
        os.path.join(exp_root, 'model', 'best.pt'),
        os.path.join(exp_root, 'tmp', 'exp_run', 'weights', 'best.pt'),
    ]
    for c in candidates:
        if os.path.exists(c):
            return c
    for root, _, files in os.walk(exp_root):
        for name in files:
            if name.lower().startswith('best') and name.lower().endswith('.pt'):
                return os.path.join(root, name)
    return ''


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', default='', help='best.pt 경로(미지정 시 자동 탐색)')
    parser.add_argument('--format', default='onnx', choices=['onnx', 'engine', 'openvino', 'torchscript'], help='내보내기 포맷')
    parser.add_argument('--imgsz', type=int, default=640, help='이미지 입력 크기')
    parser.add_argument('--half', type=int, default=0, help='half precision(1/0)')
    parser.add_argument('--dynamic', type=int, default=0, help='dynamic axes(1/0, onnx 전용)')
    parser.add_argument('--simplify', type=int, default=1, help='onnx simplify(1/0)')
    parser.add_argument('--opset', type=int, default=12, help='ONNX opset')
    parser.add_argument('--trtexec', default='', help='TensorRT trtexec.exe 경로 (미지정 시 환경변수 또는 기본 경로 사용)')
    parser.add_argument('--cuda_bin', default='', help='CUDA bin 디렉토리 경로 (PATH에 추가)')
    args = parser.parse_args()

    exp_root = os.path.dirname(__file__).replace('\\','/')
    settings_dir = exp_root
    _prepare_env(settings_dir)

    weights = _find_best(args.weights, exp_root)
    if not weights:
        print('❌ best.pt를 찾을 수 없습니다. --weights로 직접 지정해 주세요.')
        sys.exit(1)

    print('Using weights:', weights)
    from ultralytics import YOLO
    model = YOLO(weights)

    fmt = args.format
    weights_dir = os.path.dirname(weights)
    onnx_path = os.path.join(weights_dir, 'best.onnx')
    engine_path = os.path.join(weights_dir, 'best.engine')

    if fmt == 'onnx':
        kwargs = dict(imgsz=args.imgsz, half=bool(args.half), dynamic=bool(args.dynamic), simplify=bool(args.simplify), opset=args.opset)
        print('Exporting to', fmt, 'with', kwargs)
        out = model.export(format='onnx', **kwargs)
        print('✅ Export completed:', out)
    elif fmt == 'engine':
        trtexec = args.trtexec or os.environ.get('TENSORRT_TRTEXEC', '')
        if not trtexec:
            trtexec = r"C:\TensorRT\bin\trtexec.exe"
        if os.path.exists(trtexec):
            if not os.path.exists(onnx_path):
                print('ONNX not found, exporting ONNX first...')
                _onnx_kwargs = dict(imgsz=args.imgsz, half=bool(args.half), dynamic=bool(args.dynamic), simplify=bool(args.simplify), opset=args.opset)
                model.export(format='onnx', **_onnx_kwargs)
            _env = os.environ.copy()
            if args.cuda_bin:
                _env['PATH'] = args.cuda_bin + os.pathsep + _env.get('PATH', '')
            elif os.environ.get('CUDA_PATH'):
                _env['PATH'] = os.path.join(os.environ['CUDA_PATH'], 'bin') + os.pathsep + _env.get('PATH', '')
            _env.setdefault('CUDA_VISIBLE_DEVICES', '0')
            cmd = [
                trtexec,
                f"--onnx={onnx_path}",
                f"--saveEngine={engine_path}",
            ]
            if bool(args.half):
                cmd.append('--fp16')
            print('Running trtexec:', ' '.join(cmd))
            import subprocess as _sp2
            try:
                _sp2.run(cmd, check=True, env=_env)
                print('✅ TensorRT 변환 완료:', engine_path)
            except _sp2.CalledProcessError as e:
                print('❌ TensorRT 변환 실패! code=', e.returncode)
                print('command:', ' '.join(cmd))
                sys.exit(1)
        else:
            try:
                import tensorrt as _trt  # noqa: F401
            except Exception as te:
                print('TensorRT not available and trtexec not found, skipping engine export:', te)
                print('✅ Engine export skipped (install TensorRT or specify --trtexec)')
                sys.exit(0)
            kwargs = dict(imgsz=args.imgsz, half=bool(args.half))
            print('Exporting to engine via Ultralytics with', kwargs)
            out = model.export(format='engine', **kwargs)
            print('✅ Export completed:', out)


if __name__ == '__main__':
    import multiprocessing
    multiprocessing.freeze_support()
    main()
